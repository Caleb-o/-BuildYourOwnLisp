; Atoms
(def {nil} {})
(def {true} 1)
(def {false} 0)


; Function decls
(def {func} (\ {f b} {
  def (head f) (\ (tail f) b)
}))


; Logical Functions
(func {not x}   {- 1 x})
(func {or x y}  {+ x y})
(func {and x y} {* x y})

; Misc
(func {flip f a b} {f b a})
(func {ghost & xs} {eval xs})
(func {comp f g x} {f (g x)})

; Unpack list for function
(func {unpack f l} {
    eval (join (list f) l)
})

; Pack list for function
(func {pack f & xs} {f xs})

; Curried and Uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Perform several things in sequence
(func {do & l} {
    if (== l nil)
        {nil}
        {tail l}
})

; Open new scope
(func {let b} {
    ((\ {_} b) ())
})

; ====== List functions ======

(func {begin l} { eval (head l) }) ; Top item
(func {scnd l} { eval (head (tail l)) }) ; Top item
(func {third l} { eval (head (tail (tail l))) }) ; Top item

; Nth item in list
(func {nth n l} {
    if (== n 0)
        {begin l}
        {nth (- n 1) (tail l)}
})

; List length
(func {len l} {
    if (== 1 nil)
        {0}
        {+ 1 (len (tail l))}
})

(func {last l} {nth (- (len l) 1) l}) ; Last item

; Apply function to list
(func {map f l} {
    if (== l nil)
        {nil}
        {join (list (f (begin l))) (map f (tail l))}
})

; Filter items in list
(func {filter f l} {
    if (== l nil)
        {nil}
        {join (if (f (begin l)) {head l} {nil}) (filter f (tail l))}
})


; Conditional
(func {switch & cs} {
    if (== cs nil)
        {error "No Selection Found"}
        {if (begin (begin cs)) {scnd (begin cs)} {unpack switch (tail cs)}}
})

; Default case
(def {default} true)

; Case
(func {case x & cs} {
    if (== cs nil)
        {error "No Case Found"}
        {if (== x (begin (begin cs))) {scnd (begin cs)} {
                unpack case (join (list x) (tail cs)) 
            }
        }
})

; Print day of month suffix
(func {month-day-suffix i} {
    switch
        {(== i 0)   "st"}
        {(== i 1)   "nd"}
        {(== i 3)   "rd"}
        {default    "th"}
})

(func {day-name x} { 
    case x 
        {0 "Monday"}
        {1 "Tuesday"}
        {2 "Wednesday"}
        {3 "Thursday"}
        {4 "Friday"}
        {5 "Saturday"}
        {6 "Sunday"}
})


; ====== Programs ======

; Fibonacci
; Before hashing :: 5.299000 seconds
; After hashing :: ... seconds
(func {fib n} {
    switch
        { (== n 0) 0 }
        { (== n 1) 1 }
        { default (+ (fib (- n 1)) (fib (- n 2))) }
})